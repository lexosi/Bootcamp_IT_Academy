// Display all documents in the Restaurants collection
db.restaurants.find()

// Show the restaurant_id, name, borough and cuisine for all documents
db.restaurants.find({}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1})

// Exclude field _id for all documents
db.restaurants.find({}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0})

// Show restaurant_id, name, borough and cod code zip, but excludes field _id
db.restaurants.find({}, {restaurant_id: 1, name: 1, borough: 1, "address.zipcode": 1, _id: 0})

// Show all the restaurants in the Bronx
db.restaurants.find({borough: "Bronx"})

// Show the first 5 restaurants in the Bronx
db.restaurants.find({borough: "Bronx"}).limit(5)

// Show the next 5 restaurants after skipping the first 5 in the Bronx
db.restaurants.find({borough: "Bronx"}).skip(5).limit(5)

// Find restaurants that have a score of more than 90
db.restaurants.find({"grades.score": {$gt: 90}})

// Find restaurants that have a score of more than 80 but less than 100
db.restaurants.find({"grades.score": {$gt: 80, $lt: 100}})

// Find restaurants that are located in latitude value less than -95.754168
db.restaurants.find({"address.coord": {$lt: -95.754168}})

// Find restaurants that do not prepare any ‘American’ cuisine and its rating is greater than 70 and length less than -65.754168
db.restaurants.find({cuisine: {$ne: "American"}, "grades.score": {$gt: 70}, "address.coord": {$lt: -65.754168}})

// Find restaurants that don’t prepare any ‘American’ cuisine and got a score of more than 70 and located in length less than -65.754168
db.restaurants.find({cuisine: {$ne: "American"}, "grades.score": {$gt: 70}, "address.coord": {$lt: -65.754168}})

// Find restaurants that don’t prepare any ‘American’ cuisine and got a ‘A’ grade point doesn’t belong to Brooklyn
db.restaurants.find({cuisine: {$ne: "American"}, "grades.grade": "A", borough: {$ne: "Brooklyn"}}).sort({cuisine: -1})

// Find the restaurant_id, name, borough and cuisine for those restaurants that contain ‘Wil’ as the first three letters in their name
db.restaurants.find({name: /^Wil/}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0})

// Find the restaurant_id, name, borough and cuisine for those restaurants that contain ‘ces’ as the last three letters in their name
db.restaurants.find({name: /ces$/}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0})

// Find the restaurant_id, name, borough and cuisine for those restaurants that contain 'Reg' as three letters somewhere in its name
db.restaurants.find({name: /.*Reg.*/}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0})

// Find the restaurants that belong to the Bronx and prepared any American or Chinese dish
db.restaurants.find({borough: "Bronx", cuisine: {$in: ["American ", "Chinese"]}})

// Find the restaurant_id, name, borough and cuisine for those restaurants belonging to Staten Island or Queens or Bronx or Brooklyn
db.restaurants.find({borough: {$in: ["Staten Island", "Queens", "Bronx", "Brooklyn"]}}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0})

// Find the restaurant_id, name, borough and cuisine for those restaurants that do not belong to Staten Island or Queens or Bronx or Brooklyn
db.restaurants.find({borough: {$nin: ["Staten Island", "Queens", "Bronx", "Brooklyn"]}}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0})

// Find the restaurant_id, name, borough and cuisine for those restaurants that get a marker that is no more than 10
db.restaurants.find({"grades.score": {$lte: 10}}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0})

// Find the restaurant_id, name, borough and cuisine for those restaurants that prepare fish except 'American' and 'Chinees' or the restaurant name starts with 'Wil' letters
db.restaurants.find({$or: [{cuisine: "Fish", name: {$ne: /^Wil/}, cuisine: {$nin: ["American ", "Chinese"]}}]}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0})

// Find the restaurant_id, name, and grades for those restaurants that achieve a "A" grade and a score 11 in ISODate study data "2014-08-11T00:00:00Z"
db.restaurants.find({"grades.date": ISODate("2014-08-11T00:00:00Z"), "grades.grade": "A", "grades.score": 11}, {restaurant_id: 1, name: 1, grades: 1, _id: 0})

// Find the restaurant_id, name, and grades for those restaurants where the 2nd grade variety element contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z"
db.restaurants.find({"grades.1.date": ISODate("2014-08-11T00:00:00Z"), "grades.1.grade": "A", "grades.1.score": 9}, {restaurant_id: 1, name: 1, grades: 1, _id: 0})

// Find the restaurant_id, name, address and geographical location for those restaurants where the second element of the coord array contains a value that is more than 42 and up to 52
db.restaurants.find({"address.coord.1": {$gt: 42, $lte: 52}}, {restaurant_id: 1, name: 1, address: 1, _id: 0})

// Organize the name of restaurants in ascending order along with all the columns
db.restaurants.find().sort({name: 1})

// Organize the name of restaurants in descending order along with all columns
db.restaurants.find().sort({name: -1})

// Organize the name of the cuisine in ascending order and the same cuisine borough in descending order
db.restaurants.find().sort({cuisine: 1, borough: -1})

// Know all directions that do not contain the street
db.restaurants.find({"address.street": {$exists: false}})

// Select all documents in the restaurant collection where the value of the coord field is Double
db.restaurants.find({"address.coord": {$type: "double"}})

// Select the restaurant_id, name and grades for those restaurants that return 0 as rest after dividing the score by 7
db.restaurants.find({"grades.score": {$mod: [7, 0]}}, {restaurant_id: 1, name: 1, grades: 1, _id: 0})

// Find the restaurant name, borough, longitude and latitude and cuisine for those restaurants that contain ‘mon’ like three letters somewhere in their name
db.restaurants.find({name: /.*mon.*/}, {name: 1, borough: 1, "address.coord": 1, cuisine: 1, _id: 0})

// Find the restaurant name, borough, longitude and latitude and cuisine for those restaurants that contain 'Mad' as the first three letters of their name
db.restaurants.find({name: /^Mad/}, {name: 1, borough: 1, "address.coord": 1, cuisine: 1, _id: 0})